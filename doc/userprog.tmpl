             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Owen Davies tod11@doc.ic.ac.uk
Daniel Hertz dh611@doc.ic.ac.uk
Charlie Hothersall-Thomas cjh111@doc.ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define MAXARGS = 100
Maximum number of arguments a program can take, for memory allocation reasons

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

First, we copy the arguments onto the stack in reverse' order and save their
addresses. Then, we word align for faster stack access. Then NULL is placed on
the stack to be the end of argv[], and we iterate backwards through the list of
pointers pushing them onto the stack (as we have already counted the
number of elements when pushing them on). Then a pointer to the start of argv
is pushed, argc, and the void return value.

The arguments of argv[] are simply arranged by counting down the variable used
to put the arguments on the stack in the first place. By only allowing 100
arguments, the page cannot get too large, and probably less than a page, as few
arguements are likely to be over 40 chars.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() is not thread-safe, since its implementation makes use of static
variables which are reused in each subsequent call. This means that if two
threads were calling strtok() simultaneously, the behaviour of strtok() would
be undefined, and could lead to one thread accessing a string owned by a
different thread.

strtok_r() is a re-entrant method due to its third argument, and is therefore
thread-safe.

Since Pintos is a multi-threaded environment, strtok_r() is implemented, but not
strtok().


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

This allows the shell to be more advanced - piping arguments from one program to
another and having multiple directories of binary files that are easy to use
with the PATH variable. Its also probably more secure, as less woej in the 
kernel usually is.

One main advantage to the UNIX approach is that it allows the shell to be more
advanced, with features such as tab-completion, piping (|), redirection
(<, >, <<, >>) and the execution of many binaries spread across multiple
directories due to the PATH variable.

Another advantage to the UNIX approach is that the code for parsing user input
is written in the shell. Not only does this make kernel code much cleaner and
less complex, but it also means that all user input-parsing code is run in
user space as opposed to kernel space, which offers security benefits.


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
  ...

  #ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */

    struct list children;               /* The thread's children threads */
    struct thread *parent;              /* The thread's parent */
    struct condition child_waiter;      /* Condition variable that a parent
                                           uses to wait for it's child */
    struct lock cond_lock;              /* Lock used by child_waiter */
    enum loaded_status child_status;    /* Used to track new child's state */

    struct file *executable;            /* Keep track of the executing file */

    struct list open_fds;               /* Used to close fds on exit call. */
  #endif

  ...
  }

We use the children list and the parent thread pointer in system calls like 
wait and exec. The condition child_waiter and lock cond_lock is used in
process_wait() to check whether a child has finished waiting or not. The 
executable file pointer is used to deny writes to executables. We also keep 
track of a thread's open files to make sure they are all closed when exit() is 
called.


struct child_info
  {
    tid_t id;                           /* The tid of the child */
    int return_status;                  /* Exit status of the child  */
    bool has_exited;                    /* Has the child been exited
                                           properly? */
    bool has_waited;                    /* Has the child been waited? */

    struct list_elem infoelem;          /* List elem to put inside the parent
                                           thread's children list */
  };

This struct holds all the information needed about a thread's child in 
process_wait. We need to keep track of the child's return status, and boolean 
flags to check the various cases in process_wait().


enum loaded_status
  {
    LOADING,
    LOADED,
    FAILED
  };

The status of a loading thread, used by the exec system call and 
process_execute() to keep track of the status of a newly executed child thread.


static struct hash fd_hash;

A hash table which maps file descriptors to file structs, and the thread that
owns them. This is used in any system call where fds are created, used, or
destroyed.


static int next_fd = 2;

The starting point for our file descriptor allocator. This is incremented every 
time a file descriptor is created, to ensure that every descriptor is unique
across the operating system.


struct fd
  {
    int fd;
    struct list_elem elem;
  };

This struct is used by the thread struct. It represents an element of a linked 
list of file descriptors, used to track a thread's open files.


struct fd_node
  {
    struct hash_elem hash_elem;
    unsigned fd;
    struct thread *thread;
    struct file *file;
  };

The element that is inserted into fd_hash. We keep track of the file descriptor,
its owner and a pointer to the corresponding file.


#define MAX_PUTBUF 512

The maximum number of bytes to be written to STDOUT at a time, used in the write
system call.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

We use the fd_node struct to associate files with file descriptors. We store a 
map from file descriptors to files in the fd_hash hash table, and we use the 
same hash element to keep track of the thread that owns the file descriptor. 

When a process calls the open system call, we create an fd_node, store the fd 
(obtained from next_fd), a pointer to the current thread and a pointer to the 
file in the fd_node, and call hash_insert() on fd_hash and the hash_elem 
member of fd_node. We also add the fd number to the current thread's list of 
open file_descriptors. In the close system call, we get the hash_elem linked 
with the fd argument (taking advantage of the constant time hash_find function) 
and delete that element from the fd_hash. The fd is also removed from the
thread's open_fd list.

File descriptors are unique within the entire OS, controlled by the static int 
next_fd. If we had decided to make fds unique only within each process then we 
would have to have made the thread struct even larger, which seemed like an 
unnecessary waste of space.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

At the start of the read system call, we check if the fd == 1 before doing 
anything else (if we're trying to read from STDOUT then we should exit the 
process). Next we check if the buffer points to a valid user memory address, 
meaning that it is safe to dereference. This is done with a call to our method
is_safe_usr_ptr(). If it isn't safe then is_safe_user_ptr() exits the process
with error code -1; if it is safe, we carry on.

Next we check if we are reading from STDIN. If we are, then we use a loop to
make LENGTH calls to input_getc (), reading LENGTH characters from keyboard
input. If we are not reading from STDIN but from a file, then we acquire the
file system lock, retrieve the open file associated with the fd number, and call file_read() with that fd. We then release the lock and return the result of the file_read call. If there is a problem with the provided file descriptor (e.g. it
isn't mapped, or belongs to a different thread), the static method fd_to_file() exits the process with error code -1.


The write system call operates in a similar way. First, we check if we are 
trying to write to STDIN, and exit with an error if we are. Then we make a call
to is_safe_usr_ptr() with the buffer, ensuring that it is safe.

If we are writing to STDOUT, then first we check what the size of the write is. 
If it is less than MAX_PUTBUF (which we defined as 512), then we write the 
whole contents of the buffer in one call to putbuf(). If it's greater than 512 
bytes then we write the output in blocks of up to 512 bytes at a time.

If we are not writing to STDOUT we acquire the file system lock, make a call to 
file_write() using the file associated with our fd, then we release the lock and
return the result of the file_write() call. As with the read system call, any
problems with the fd are handled by fd_to_file(), a static method which takes
an unsigned fd and returns a pointer to the open file with which it is
associated.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

TODO

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait system call is implemented  in terms of process_wait(). Firstly it
checks whether the child process was created successfully by checking comparing 
its tid to TID_ERROR. If it is equal to TID_ERROR then we return TID_ERROR. If
it isn't, then we make a call to the get_child() method (defined in thread.c),
which returns the child_info struct associated with the tid of the thread that
we are waiting on. If this returns NULL then we exit, as this means that the
child thread is not a direct child of the current thread. We then check if the
has_waited flag has been called on the child thread. If it has, then wait has
already been called on this child and we exit immediately.

Next we actually wait for the child process. We implemented this using a 
condition variable held inside the thread struct: the waiting process acquires 
the condition variable lock and then calls cond_wait in a while loop, which is
conditioned on the child thread still existing (using a call to get_thread(), a 
method we added in thread.c). When a thread exits, it signals its parent's 
condition variable, which kicks the parent out of the while loop. We then check 
to see if the child thread was killed by the kernel (by checking the has_exited
flag), and if it was then we return -1. Otherwise, we set the has_waited flag
and return the return status of the child.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

TODO


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

To keep track of the status of a newly loaded executable we created an enum 
(detailed in question B1), an instance of which is stored in the thread struct. 
When a thread is created, the status of the child is set to LOADING. If the 
load is successful then the child status is set to LOADED, otherwise it is set 
to FAILED (this check is done in start_process()). 

To ensure the executing thread waits for its child, we use a condition variable,
as was used in process_wait(). After we call process_execute() from the exec 
system call, we wait on the condition variable in a loop. Once we've set the
child status in start_process(), we call cond_signal, and the parent thread
breaks out of its while loop. We can then check child status and return -1 if it
is set to FAILED.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

If wait is called before C exits then the condition variable wait and signal 
functions are used to ensure synchronization. The lock associated with the 
condition variable is acquired and released before any cond_wait or cond_signal 
calls are made, to ensure that only one child can signal the parent at once. If 
wait is called after C exits, then we will never enter the while loop in 
process_wait() since the call to get_thread() will return NULL.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

TODO


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Using a hash table for mapping file descriptors to files gives excellent search 
speed. Many system calls call the fd_to_file() function, which completes in 
constant time thanks to the use of hash table. If we had used a linked list or 
similar for this, fd_to_file() would have had linear time complexity. The fact 
that we use a single hash table saves us a lot of space, as we don't have a hash 
table in the thread struct. It also keeps thread creation time to a minimum, as 
we don't have to initialise a hash table every time we create a thread. 

However, because we have to close any open file descriptors in the exit system 
call, each thread still has an extra list of its file descriptors, which 
somewhat nullifies our space saving efforts. We could have iterated through the 
hash table in exit() instead of storing the file descriptors inside the thread 
struct, but the hash table is often very large (it contains all the file 
descriptors instead of just one thread's) so this would've taken a lot longer.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default identity mapping between tids and pids. Since a thread can 
only ever have one process and each process has a unique tid there is no need to 
have a complex mapping between the two.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
